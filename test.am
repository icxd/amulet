// pkg std {
  type Iterable<T> = interface {
    fn iterator(self) -> Iterator<T>;
  };

  type Iterator<T> = interface {
    fn has_next(self) -> bool;
    fn next(mut self) -> T;
  };

  type Collection<T> = interface {
    fn append(mut self, t: T);
    fn pop(mut self) -> T;
    fn at(self, pos: usz) -> T?;
  };

  type ArrayIterator<T> = class Iterator<T> {
    mut array: Array<T>;
    mut pos: usz = 0;

    fn has_next(self) -> bool = self.pos < self.array.size;
    fn next(mut self) -> T {
      let item = self.array.at(self.pos);
      self.pos += 1;
      return item;
    }
  };

  type Array<T> = class Collection<T> & Iterable<T> {
    mut data: T* = nullptr;
    mut size: usz = 0;
    mut capacity: usz = 0;
    
    fn iterator(self) -> Iterator<T> = ArrayIterator<T>();
    
    fn append(mut self, t: T) = todo;

    fn pop(mut self) -> T { 
      let item = self.data[self.size - 1];
      self.size -= 1;
      return item;
    }
    
    fn at(self, pos: usz) -> T? {
      if (self.data[pos] >= self.size) {
        return null;
      }
      return self.data[pos];
    }
  };
// }

fn main() {
  mut my_arr = std.Array<i32>();
  mut iterator = my_arr.iterator();
  while (iterator.has_next()) {
    let item = iterator.next();
    println("{}", item);
  }
}